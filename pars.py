from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.types import ParseMode, BotCommand, InputFile
from aiogram.dispatcher.filters.state import State, StatesGroup
import kuzstuapi
import datetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.callback_data import CallbackData
import logging
import os
import config
#–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏—è –¥–ª—è except

path = os.path.dirname(os.path.abspath(__file__)) + "//"
os.chdir(path)

bot = Bot(token="6046839961:AAGXl_r-RpnHrG8qRgVOiO8tq8IP9fpJE0Y")
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

grouplist = {}
teacherlist = {}
statelist = {}

cancel_keyboard = types.InlineKeyboardMarkup()
cancel_button = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
cancel_keyboard.add(cancel_button)

GroupKeyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
Group_Buttons = [
    types.KeyboardButton(text="üìó–°–µ–≥–æ–¥–Ω—èüìó"),
    types.KeyboardButton(text="üìò–ó–∞–≤—Ç—Ä–∞üìò"),
    types.KeyboardButton(text="‚öôÔ∏è–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É‚öôÔ∏è"),
    types.KeyboardButton(text="‚öôÔ∏è–î–æ–ø. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏‚öôÔ∏è"),
    types.KeyboardButton(text="üéì–°—Ç—É–¥–µ–Ω—Çüéì")
]
GroupKeyboard.row(Group_Buttons[0], Group_Buttons[1])
GroupKeyboard.row(Group_Buttons[2], Group_Buttons[3])
GroupKeyboard.add(Group_Buttons[4])

TeacherKeyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
Teacher_Buttons = [
    types.KeyboardButton(text="üìó–°–µ–≥–æ–¥–Ω—èüìó"),
    types.KeyboardButton(text="üìò–ó–∞–≤—Ç—Ä–∞üìò"),
    types.KeyboardButton(text="‚öôÔ∏è–°–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è‚öôÔ∏è"),
    types.KeyboardButton(text="‚öôÔ∏è–î–æ–ø. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏‚öôÔ∏è"),
    types.KeyboardButton(text="‚úèÔ∏è–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å‚úèÔ∏è")
]
TeacherKeyboard.row(Teacher_Buttons[0], Teacher_Buttons[1])
TeacherKeyboard.row(Teacher_Buttons[2], Teacher_Buttons[3])
TeacherKeyboard.add(Teacher_Buttons[4])

AdditionalKeyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
AdditionalKeys = [
    types.KeyboardButton(text="üìï–ù–∞ –Ω–µ–¥–µ–ª—éüìï"),
    types.KeyboardButton(text="üö™–ü–æ –∫–∞–±–∏–Ω–µ—Ç—Éüö™"),
    types.KeyboardButton(text="‚óÄÔ∏è–ù–∞–∑–∞–¥‚óÄÔ∏è")
]
AdditionalKeyboard.row(AdditionalKeys[0], AdditionalKeys[1])
AdditionalKeyboard.add(AdditionalKeys[2])

def return_log(message):
    print(datetime.datetime.now(), message.from_user.first_name, message.from_user.last_name, message.text)

#-----------------------------------------------------------------------------------------
class ChangeData(StatesGroup):
    waiting_for_group_name = State()
    waiting_for_teacher_surname = State()
    waiting_for_teacher_group = State()
    waiting_for_place = State()
#-----------------------------------------------------------------------------------------

@dp.message_handler(commands="group", state="*")
async def ask_group(message: types.Message, state: FSMContext):
    await message.answer("üóí–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=cancel_keyboard)
    await state.set_state(ChangeData.waiting_for_group_name.state)

@dp.callback_query_handler(text="student")
async def ask_groupe(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("üóí–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=cancel_keyboard)
    await call.answer()
    await state.set_state(ChangeData.waiting_for_group_name.state)

@dp.callback_query_handler(text="cancel", state=ChangeData)
async def cancel_action(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã")
    await call.answer()
    await state.finish()

@dp.message_handler(state=ChangeData.waiting_for_group_name)
async def change_group(message: types.Message, state: FSMContext):
    await state.update_data(group_name = message.text.lower())
    group_name = await state.get_data()
    group_name = group_name.get("group_name")
    await message.answer("üîé–ò—â—É –≥—Ä—É–ø–ø—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ...")
    try:
        sch = config.get_group_name(group_name)
        group_name = sch
        a = []
        a.append(group_name)
        grouplist[message.from_id] = a
        await message.answer("‚úÖ–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {}".format(group_name), reply_markup=GroupKeyboard)
        statelist[message.from_id] = "student"
        await state.finish()
    except Exception as ex:
        print(ex)
        await message.answer("üòî–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=cancel_keyboard)
        return


#-----------------------------------------------------------------------------------------

@dp.callback_query_handler(text="return")
async def return_to_teacher_group(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("üóí–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–ø–æ–¥–∞—ë—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:", reply_markup=cancel_keyboard)
    await call.answer()
    await state.set_state(ChangeData.waiting_for_teacher_group.state)

@dp.message_handler(commands="teacher", state="*")
async def ask_teacher_surname(message: types.Message, state: FSMContext):
    await message.answer("üóí–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–ø–æ–¥–∞—ë—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:", reply_markup=cancel_keyboard)
    await state.set_state(ChangeData.waiting_for_teacher_group.state)

@dp.callback_query_handler(text="teacher")
async def ask_teacher_surnamee(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("üóí–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–ø–æ–¥–∞—ë—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:", reply_markup=cancel_keyboard)
    await call.answer()
    await state.set_state(ChangeData.waiting_for_teacher_group.state)


@dp.message_handler(state=ChangeData.waiting_for_teacher_group)
async def change_teacher_group(message: types.Message, state: FSMContext):
    await state.update_data(teacher_group = message.text.lower())
    try:
        teacher_group_name = await state.get_data()
        teacher_group_name = teacher_group_name.get("teacher_group")
        sch = config.get_group_name(teacher_group_name)
        teacher_group = sch
        a = []
        a.append(teacher_group)
        teacherlist[message.from_id] = a
        await message.answer("‚úÖ–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: {}\nüóí–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:".format(teacher_group), reply_markup=cancel_keyboard)
        await state.set_state(ChangeData.waiting_for_teacher_surname.state)
    except Exception as ex:
        print(ex, "teacher ex")
        await message.answer("üòî–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=cancel_keyboard)
        return

@dp.message_handler(state=ChangeData.waiting_for_teacher_surname)
async def change_teacher_surname(message: types.Message, state: FSMContext):
    await state.update_data(teacher_surname = message.text.lower())
    group_name = teacherlist.get(message.from_id)[0]
    teacher_surname = await state.get_data()
    teacher_surname = teacher_surname.get("teacher_surname")
    try:
        sch = config.get_teacher_schedule(teacher_surname ,group_name)
        a = teacherlist.get(message.from_id)
        a.append(teacher_surname)
        teacherlist[message.from_id] = a
        await message.answer("‚úÖ–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {}".format(str(teacher_surname).capitalize()), reply_markup=TeacherKeyboard)
        statelist[message.from_id] = "teacher"
        await state.finish()
    except Exception as ex:
        print(ex)
        await message.answer("üòî–¢–∞–∫–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É", reply_markup=cancel_keyboard)
        return


#-----------------------------------------------------------------------------------------

@dp.message_handler(state=ChangeData.waiting_for_place)
async def change_teacher_group(message: types.Message, state: FSMContext):
    await state.update_data(teacher_group = message.text.lower())
    schedule = str(datetime.datetime.now().strftime('%Y-%m-%d'))
    try:
        if statelist[message.from_id] == "student":
            await message.answer(config.make_placelist_great(message.text, schedule), reply_markup=GroupKeyboard, parse_mode=ParseMode.HTML)
        elif statelist[message.from_id] == "teacher":
            await message.answer(config.make_placelist_great(message.text, schedule), reply_markup=TeacherKeyboard, parse_mode=ParseMode.HTML)
        await state.finish()
    except Exception as ex:
        print(ex)
        await message.answer("üòî–¢–∞–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return

#-----------------------------------------------------------------------------------------


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    statelist[message.from_id] = "student"
    buttons = [
        types.InlineKeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç", callback_data="student"),
        types.InlineKeyboardButton(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="teacher")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    photo = InputFile("16752191029290.png")
    await message.answer("üíú*–ë–æ—Ç –†–∞–π–∞* \- —Ç–≤–æ–π –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ö—É–∑–ì–¢–£\nüí´*–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ*\n\nüë®‚Äçüíª–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ *–Ω–µ–¥–µ–ª–∏*", parse_mode=ParseMode.MARKDOWN_V2, reply_markup=types.ReplyKeyboardRemove())
    await message.answer_photo(photo=photo,caption="üëã –ü—Ä–∏–≤–µ—Ç, {}!\n\n‚ùì–ß—å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?".format(message.from_user.username),reply_markup=keyboard)

@dp.message_handler(commands=['about'])
async def about_bot(message: types.Message):
    await message.answer("üíú*–ë–æ—Ç –†–∞–π–∞* \- —Ç–≤–æ–π –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ö—É–∑–ì–¢–£\nüí´*–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ*\n\nüë®‚Äçüíª–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ *–Ω–µ–¥–µ–ª–∏*", parse_mode=ParseMode.MARKDOWN_V2)


@dp.message_handler(text="üìó–°–µ–≥–æ–¥–Ω—èüìó")
async def send_today_schedule(message: types.Message):
    schedule = str(datetime.datetime.now().strftime('%Y-%m-%d'))
    try:
        if statelist[message.from_id] == "student":
            try:
                await message.reply(kuzstuapi.reform_group_schedule(grouplist.get(message.from_id)[0],schedule), parse_mode=ParseMode.MARKDOWN)
            except:
                await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É")
        elif statelist[message.from_id] == "teacher":
            try:
                await message.reply(config.make_teacherlist_great(teacherlist.get(message.from_id)[1],schedule, teacherlist.get(message.from_id)[0]), parse_mode=ParseMode.HTML)
            except:
                await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    except:
        await process_start_command(message=message)

@dp.message_handler(text="üìò–ó–∞–≤—Ç—Ä–∞üìò")
async def send_tomorrow_schedule(message: types.Message):
    schedule = config.make_day_greater(date=datetime.datetime.now())
    try:
        if statelist[message.from_id] == "student":
            try:
                await message.reply(kuzstuapi.reform_group_schedule(grouplist.get(message.from_id)[0],(schedule)),parse_mode=ParseMode.MARKDOWN)
            except:
                await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É")
        elif statelist[message.from_id] == "teacher":
            try:
                await message.reply(config.make_teacherlist_great(teacherlist.get(message.from_id)[1], schedule, teacherlist.get(message.from_id)[0]), parse_mode=ParseMode.HTML)
            except Exception as ex:
                print(ex)
                await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    except:
        await process_start_command(message=message)

@dp.message_handler(text="üìï–ù–∞ –Ω–µ–¥–µ–ª—éüìï")
async def send_today_schedule(message: types.Message):
    try:
        if statelist[message.from_id] == "student":
            try:
                await message.reply(kuzstuapi.reform_week_group_schedule(grouplist.get(message.from_id)[0]), parse_mode=ParseMode.MARKDOWN)
            except:
                await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É")
        elif statelist[message.from_id] == "teacher":
            try:
                await message.reply(config.make_teacherweek_list_great(teacherlist.get(message.from_id)[1], teacherlist.get(message.from_id)[0]), parse_mode=ParseMode.HTML)
            except:
                await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    except:
        await process_start_command(message=message)

"""@dp.message_handler(commands=['–î–∞—Ç–∞', "date"])
async def send_bydate_schedule(message: types.Message):
    try:
        await message.reply(config.make_list_great(grouplist.get(message.from_id)[0],str(datetime.datetime.strptime(str(message.get_args()), "%d.%m").replace(year=datetime.datetime.now().year).strftime("%Y-%m-%d"))),parse_mode=ParseMode.HTML)
    except:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É\n/group")"""


#-----------------------------------------------------------------------------------------

"""@dp.message_handler(commands=['teacher_date'])
async def send_teacher_date_schedule(message: types.Message):
    try:
        await message.reply(config.make_teacherlist_great(teacherlist.get(message.from_id)[1],str(datetime.datetime.strptime(str(message.get_args()), "%d.%m").replace(year=datetime.datetime.now().year).strftime("%Y-%m-%d")), teacherlist.get(message.from_id)[0]), parse_mode=ParseMode.HTML)
    except:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—á–∏—Ç–µ–ª—è\n/set_teacher *–§–∞–º–∏–ª–∏—è*")"""

#-----------------------------------------------------------------------------------------

@dp.message_handler(text="üéì–°—Ç—É–¥–µ–Ω—Çüéì")
async def ChangeStateTo_Teacher(message: types.Message):
    statelist[message.from_id] = "teacher"
    await message.answer("‚úèÔ∏è–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å‚úèÔ∏è", reply_markup=TeacherKeyboard)

@dp.message_handler(text="‚úèÔ∏è–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å‚úèÔ∏è")
async def ChangeStateTo_Teacher(message: types.Message):
    statelist[message.from_id] = "student"
    await message.answer("üéì–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –°—Ç—É–¥–µ–Ω—Çüéì", reply_markup=GroupKeyboard)

@dp.message_handler(text="‚öôÔ∏è–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É‚öôÔ∏è")
async def ChangeGroupTo(message: types.Message, state: FSMContext):
    await ask_group(message=message, state=state)

@dp.message_handler(text="‚öôÔ∏è–°–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è‚öôÔ∏è")
async def ChangeTeacherTo(message: types.Message, state: FSMContext):
    await ask_teacher_surname(message=message, state=state)

@dp.message_handler(text="‚öôÔ∏è–î–æ–ø. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏‚öôÔ∏è")
async def Open_AdditionalSettings(message: types.Message, state: FSMContext):
    await message.answer("‚öôÔ∏è–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –¥–æ–ø. –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π‚öôÔ∏è", reply_markup=AdditionalKeyboard)

@dp.message_handler(text="‚óÄÔ∏è–ù–∞–∑–∞–¥‚óÄÔ∏è")
async def Back_toMenu(message: types.Message, state: FSMContext):
    if statelist[message.from_id] == "student":
        await message.answer("‚öôÔ∏è–ú–µ–Ω—é –¥–æ–ø. –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∑–∞–∫—Ä—ã—Ç–æ‚öôÔ∏è", reply_markup=GroupKeyboard)
    elif statelist[message.from_id] == "teacher":
         await message.answer("‚öôÔ∏è–ú–µ–Ω—é –¥–æ–ø. –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∑–∞–∫—Ä—ã—Ç–æ‚öôÔ∏è", reply_markup=TeacherKeyboard)
    else:
        process_start_command(message)

@dp.message_handler(text="üö™–ü–æ –∫–∞–±–∏–Ω–µ—Ç—Éüö™")
async def Wait_ToPlace(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(ChangeData.waiting_for_place.state)

#-----------------------------------------------------------------------------------------

@dp.message_handler(commands=["place"])
async def send_place_today_schedule(message: types.Message):
    try:
        await message.reply(config.make_placelist_great(message.get_args(),str(datetime.datetime.now().strftime('%Y-%m-%d'))), parse_mode=ParseMode.HTML)
    except Exception as ex:
        print(ex)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")

#-----------------------------------------------------------------------------------------


if __name__ == '__main__':
    executor.start_polling(dp)