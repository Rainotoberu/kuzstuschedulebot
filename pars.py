from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.types import ParseMode, BotCommand, InputFile
from aiogram.dispatcher.filters.state import State, StatesGroup
import config
import datetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.callback_data import CallbackData
import logging
import os
#–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏—è –¥–ª—è except

path = os.path.dirname(os.path.abspath(__file__)) + "//"
os.chdir(path)

bot = Bot(token="2141742644:AAGQvMwjYrdyUtD_lyZSDlb1aROis-tdDDk")
dp = Dispatcher(bot, storage=MemoryStorage())
grouplist = {}
teacherlist = {}


async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="/today", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
        BotCommand(command="/tomorrow", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
        BotCommand(command="/date", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É"),
        BotCommand(command="/teacher_today", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä. –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
        BotCommand(command="/teacher_tomorrow", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä. –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
        BotCommand(command="/teacher_date", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä. –Ω–∞ –¥–∞—Ç—É"),
        BotCommand(command="/about", description="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    ]
    await bot.set_my_commands(commands)

logging.basicConfig(level=logging.INFO)

#-----------------------------------------------------------------------------------------
class ChangeData(StatesGroup):
    waiting_for_group_name = State()
    waiting_for_teacher_surname = State()
    waiting_for_teacher_group = State()
    waiting_for_place = State()
#-----------------------------------------------------------------------------------------

@dp.message_handler(commands="group", state="*")
async def ask_group(message: types.Message, state: FSMContext):
    await message.answer("üóí–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É:")
    await state.set_state(ChangeData.waiting_for_group_name.state)

@dp.callback_query_handler(text="student")
async def ask_groupe(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("üóí–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É:")
    await state.set_state(ChangeData.waiting_for_group_name.state)

@dp.message_handler(state=ChangeData.waiting_for_group_name)
async def change_group(message: types.Message, state: FSMContext):
    await state.update_data(group_name = message.text.lower())
    group_name = await state.get_data()
    group_name = group_name.get("group_name")
    try:
        sch = config.get_group_schedule(group_name)
        group_name = sch[0].get("education_group_name")
        a = []
        a.append(group_name)
        grouplist[message.from_id] = a
        await message.answer("‚úÖ–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {}".format(group_name))
        await state.finish()
    except Exception as ex:
        print(ex)
        await message.reply("–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—Éüòî")
        return

@dp.message_handler(commands="cancel", state=ChangeData.waiting_for_group_name)
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–∞")


#-----------------------------------------------------------------------------------------


@dp.message_handler(commands="teacher", state="*")
async def ask_teacher_surname(message: types.Message, state: FSMContext):
    await message.answer("üóí–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–ø–æ–¥–∞—ë—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:")
    await state.set_state(ChangeData.waiting_for_teacher_group.state)

@dp.callback_query_handler(text="teacher")
async def ask_groupe(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("üóí–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–ø–æ–¥–∞—ë—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:")
    await state.set_state(ChangeData.waiting_for_teacher_group.state)

@dp.message_handler(state=ChangeData.waiting_for_teacher_group)
async def change_teacher_group(message: types.Message, state: FSMContext):
    await state.update_data(teacher_group = message.text.lower())
    try:
        teacher_group_name = await state.get_data()
        teacher_group_name = teacher_group_name.get("teacher_group")
        sch = config.get_group_schedule(teacher_group_name)
        teacher_group = sch[0].get("education_group_name")
        print(sch)
        a = []
        a.append(teacher_group)
        teacherlist[message.from_id] = a
        await message.answer("–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: {}\nüóí–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:".format(teacher_group))
        await state.set_state(ChangeData.waiting_for_teacher_surname.state)
    except Exception as ex:
        print(ex, "teacher ex")
        await message.answer("–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—Éüòî")
        return

@dp.message_handler(state=ChangeData.waiting_for_teacher_surname)
async def change_teacher_surname(message: types.Message, state: FSMContext):
    await state.update_data(teacher_surname = message.text.lower())
    group_name = teacherlist.get(message.from_id)[0]
    teacher_surname = await state.get_data()
    teacher_surname = teacher_surname.get("teacher_surname")
    try:
        sch = config.get_teacher_schedule(teacher_surname ,group_name)
        a = teacherlist.get(message.from_id)
        a.append(teacher_surname)
        teacherlist[message.from_id] = a
        await message.answer("‚úÖ–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {}".format(str(teacher_surname).capitalize()))
        await state.finish()
    except Exception as ex:
        print(ex)
        await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—Éüòî")
        return

@dp.message_handler(commands="cancel", state=ChangeData.waiting_for_teacher_surname)
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–°–º–µ–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


#-----------------------------------------------------------------------------------------


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await set_commands(bot)
    buttons = [
        types.InlineKeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç", callback_data="student"),
        types.InlineKeyboardButton(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="teacher")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    photo = InputFile("16752191029290.png")
    await message.answer_photo(photo=photo,caption="üëã –ü—Ä–∏–≤–µ—Ç, {}!\n\n‚ùì–ß—å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?".format(message.from_user.username), reply_markup=keyboard)

@dp.message_handler(commands=['about'])
async def process_start_command(message: types.Message):
    await message.answer("üí†–ë–æ—Ç ~–ï–≤–∞~ –í–∞–ª–ª\-–ò –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–æ–±–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ *–≥—Ä—É–ø–ø—ã* –∏–ª–∏ *–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è*\n\nüìÖ–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è *–Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª–∏*\nüë®‚Äçüîß–ö–æ–º–∞–Ω–¥–æ–π –∏–∑ *–æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞*\nüêç–ù–∞ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è *Python*",parse_mode=ParseMode.MARKDOWN_V2)


@dp.message_handler(commands=['–°–µ–≥–æ–¥–Ω—è', "today"])
async def send_today_schedule(message: types.Message):
    schedule = str(datetime.datetime.now().strftime('%Y-%m-%d'))
    #schedule = text(emojize(schedule))
    try:
        await message.reply(config.make_list_great(grouplist.get(message.from_id)[0],str(datetime.datetime.now().strftime('%Y-%m-%d'))), parse_mode=ParseMode.HTML)
    except:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É\n/group")

@dp.message_handler(commands=['–ó–∞–≤—Ç—Ä–∞', "tomorrow"])
async def send_tomorrow_schedule(message: types.Message):
    schedule = config.make_day_greater(date=datetime.datetime.now())
    try:
        await message.reply(config.make_list_great(grouplist.get(message.from_id)[0],(schedule)),parse_mode=ParseMode.HTML)
    except:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É\n/group")

@dp.message_handler(commands=['–î–∞—Ç–∞', "date"])
async def send_bydate_schedule(message: types.Message):
    try:
        await message.reply(config.make_list_great(grouplist.get(message.from_id)[0],str(datetime.datetime.strptime(str(message.get_args()), "%d.%m").replace(year=datetime.datetime.now().year).strftime("%Y-%m-%d"))),parse_mode=ParseMode.HTML)
    except:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É\n/group")


#-----------------------------------------------------------------------------------------

@dp.message_handler(commands=['teacher_today'])
async def send_teacher_today_schedule(message: types.Message):
    try:
        await message.reply(config.make_teacherlist_great(teacherlist.get(message.from_id)[1],str(datetime.datetime.now().strftime('%Y-%m-%d')), teacherlist.get(message.from_id)[0]), parse_mode=ParseMode.HTML)
    except:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—á–∏—Ç–µ–ª—è\n/set_teacher *–§–∞–º–∏–ª–∏—è*")
    
@dp.message_handler(commands=['teacher_tomorrow'])
async def send_teacher_tomorrow_schedule(message: types.Message):
    schedule = config.make_day_greater(date=datetime.datetime.now())
    try:
        await message.reply(config.make_teacherlist_great(teacherlist.get(message.from_id)[1],schedule, teacherlist.get(message.from_id)[0]), parse_mode=ParseMode.HTML)
    except:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—á–∏—Ç–µ–ª—è\n/set_teacher *–§–∞–º–∏–ª–∏—è*")

@dp.message_handler(commands=['teacher_date'])
async def send_teacher_date_schedule(message: types.Message):
    try:
        await message.reply(config.make_teacherlist_great(teacherlist.get(message.from_id)[1],str(datetime.datetime.strptime(str(message.get_args()), "%d.%m").replace(year=datetime.datetime.now().year).strftime("%Y-%m-%d")), teacherlist.get(message.from_id)[0]), parse_mode=ParseMode.HTML)
    except:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—á–∏—Ç–µ–ª—è\n/set_teacher *–§–∞–º–∏–ª–∏—è*")
#-----------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------


@dp.message_handler(commands=["place"])
async def send_place_today_schedule(message: types.Message):
    try:
        await message.reply(config.make_placelist_great(message.get_args(),str(datetime.datetime.now().strftime('%Y-%m-%d'))), parse_mode=ParseMode.HTML)
    except Exception as ex:
        print(ex)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")


#-----------------------------------------------------------------------------------------


if __name__ == '__main__':
    executor.start_polling(dp)